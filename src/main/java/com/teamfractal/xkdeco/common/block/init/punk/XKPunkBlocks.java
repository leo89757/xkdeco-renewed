package com.teamfractal.xkdeco.common.block.init.punk;

import com.teamfractal.xkdeco.common.block.base.WoodStairBlock;
import com.teamfractal.xkdeco.common.block.base.basic.ItemFrameCover;
import com.teamfractal.xkdeco.common.block.base.punk.*;
import com.teamfractal.xkdeco.common.block.base.punk.ventiduct.*;
import com.teamfractal.xkdeco.common.util.XKRegistryHandler;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.fmllegacy.RegistryObject;

public class XKPunkBlocks {
    public static RegistryObject<Block> steelBlock;
    public static RegistryObject<Block> steelTiles;
    public static RegistryObject<Block> steelTileSlab;
    public static RegistryObject<Block> steelTileStair;
    public static RegistryObject<Block> smoothSteelBlock;
    public static RegistryObject<Block> steelPillar;
    public static RegistryObject<Block> steelColumn;
    public static RegistryObject<Block> steelColumnHead;
    public static RegistryObject<Block> factoryBlock;
    public static RegistryObject<Block> factorySlab;
    public static RegistryObject<Block> factoryStair;
    public static RegistryObject<Block> factoryBlockRusting;
    public static RegistryObject<Block> factorySlabRusting;
    public static RegistryObject<Block> factoryStairRusting;
    public static RegistryObject<Block> factoryBlockRusted;
    public static RegistryObject<Block> factorySlabRusted;
    public static RegistryObject<Block> factoryStairRusted;
    public static RegistryObject<Block> factoryDanger;
    public static RegistryObject<Block> factoryDangerRusting;
    public static RegistryObject<Block> factoryDangerRusted;
    public static RegistryObject<Block> factoryAttention;
    public static RegistryObject<Block> factoryAttentionRusting;
    public static RegistryObject<Block> factoryAttentionRusted;
    public static RegistryObject<Block> factoryElectricity;
    public static RegistryObject<Block> factoryElectricityRusting;
    public static RegistryObject<Block> factoryElectricityRusted;
    public static RegistryObject<Block> factoryToxic;
    public static RegistryObject<Block> factoryToxicRusting;
    public static RegistryObject<Block> factoryToxicRusted;
    public static RegistryObject<Block> factoryRadiation;
    public static RegistryObject<Block> factoryRadiationRusting;
    public static RegistryObject<Block> factoryRadiationRusted;
    public static RegistryObject<Block> factoryBiohazard;
    public static RegistryObject<Block> factoryBiohazardRusting;
    public static RegistryObject<Block> factoryBiohazardRusted;
    public static RegistryObject<Block> hollowSteelFrame;
    public static RegistryObject<Block> hollowSteelBeam;
    public static RegistryObject<Block> hollowSteelTrapdoor;
    public static RegistryObject<Block> steelTrapdoor;
    public static RegistryObject<Block> hollowSteelObliqueBeam;
    public static RegistryObject<Block> hollowSteelObliqueBeamGentle;
    public static RegistryObject<Block> hollowSteelObliqueBeamSteep;
    public static RegistryObject<Block> hollowSteelHalfBeam;
    public static RegistryObject<Block> hollowSteelBar;
    public static RegistryObject<Block> steelSafetyLadder;
    //ventiduct
    public static RegistryObject<Block> steelVentiduct;
    public static RegistryObject<Block> ventiductCorner;
    public static RegistryObject<Block> ventiductUp;
    public static RegistryObject<Block> ventiductDown;
    public static RegistryObject<Block> ventiductSixway;
    public static RegistryObject<Block> ventiductCover;
    public static RegistryObject<Block> ventiductOblique;
    public static RegistryObject<Block> ventiductObliqueSecond;
    public static RegistryObject<Block> factoryVentFan;
    public static RegistryObject<Block> factoryVentFanBig;
    public static RegistryObject<Block> factoryTrapdoor;
    public static RegistryObject<Block> factoryTrapdoorRusting;
    public static RegistryObject<Block> factoryTrapdoorRusted;
    public static RegistryObject<Block> fanBlade;
    public static RegistryObject<Block> steelWindmill;
    public static RegistryObject<Block> ironWindmill;
    public static RegistryObject<Block> woodenWindmill;
    public static RegistryObject<Block> factoryLamp;
    public static RegistryObject<Block> factoryLampBroken;
    public static RegistryObject<Block> factoryWarningLamp;
    public static RegistryObject<Block> factoryLightBar;
    public static RegistryObject<Block> factoryCeilingLamp;
    public static RegistryObject<Block> factoryPendant;
    public static RegistryObject<Block> factoryLampBlock;
    public static RegistryObject<Block> factoryLampSlab;
    public static RegistryObject<Block> factoryLampStair;
    public static RegistryObject<Block> screenOff;
    //screen
    public static RegistryObject<Block> screenOn;
    public static RegistryObject<Block> screenCube;
    public static RegistryObject<Block> screenDiagram;
    public static RegistryObject<Block> screenDna;
    public static RegistryObject<Block> screenList;
    public static RegistryObject<Block> screenMessage;
    public static RegistryObject<Block> screenThreebodies;
    public static RegistryObject<Block> screenTransport;
    public static RegistryObject<Block> mechanicalConsole;
    public static RegistryObject<Block> mechanicalScreen;
    public static RegistryObject<Block> mechanicalChair;
    public static RegistryObject<Block> techConsole;
    public static RegistryObject<Block> techScreen;
    public static RegistryObject<Block> techChair;
    public static RegistryObject<Block> techTable;
    public static RegistryObject<Block> techTableCircle;
    public static RegistryObject<Block> techTableBigcircle;
    public static RegistryObject<Block> hologramBase;

    public static void register() {
        steelBlock = XKRegistryHandler.Blocks.register("steel_block", GenericMetalBlock::new);
        steelTiles = XKRegistryHandler.Blocks.register("steel_tiles", GenericMetalBlock::new);
        steelTileSlab = XKRegistryHandler.Blocks.register("steel_tile_slab", MetalSlabBlock::new);
        steelTileStair = XKRegistryHandler.Blocks.register("steel_tile_stair", MetalStairBlock::new);
        smoothSteelBlock = XKRegistryHandler.Blocks.register("smooth_steel_block", GenericMetalBlock::new);
        steelPillar = XKRegistryHandler.Blocks.register("steel_pillar", MetalHexDirectionalBlock::new);
        steelColumn = XKRegistryHandler.Blocks.register("steel_column", MetalWallBlock::new);
        steelColumnHead = XKRegistryHandler.Blocks.register("steel_column_head", MetalWallBlock::new);
        factoryBlock = XKRegistryHandler.Blocks.register("factory_block", GenericMetalBlock::new);
        factorySlab = XKRegistryHandler.Blocks.register("factory_slab", MetalSlabBlock::new);
        factoryStair = XKRegistryHandler.Blocks.register("factory_stair", MetalStairBlock::new);
        factoryBlockRusting = XKRegistryHandler.Blocks.register("factory_block_rusting", GenericMetalBlock::new);
        factorySlabRusting = XKRegistryHandler.Blocks.register("factory_slab_rusting", MetalSlabBlock::new);
        factoryStairRusting = XKRegistryHandler.Blocks.register("factory_stair_rusting", MetalStairBlock::new);
        factoryBlockRusted = XKRegistryHandler.Blocks.register("factory_block_rusted", GenericMetalBlock::new);
        factorySlabRusted = XKRegistryHandler.Blocks.register("factory_slab_rusted", MetalSlabBlock::new);
        factoryStairRusted = XKRegistryHandler.Blocks.register("factory_stair_rusted", MetalStairBlock::new);
        factoryDanger = XKRegistryHandler.Blocks.register("factory_danger", GenericMetalBlock::new);
        factoryDangerRusting = XKRegistryHandler.Blocks.register("factory_danger_rusting", GenericMetalBlock::new);
        factoryDangerRusted = XKRegistryHandler.Blocks.register("factory_danger_rusted", GenericMetalBlock::new);
        factoryAttention = XKRegistryHandler.Blocks.register("factory_attention", GenericMetalBlock::new);
        factoryAttentionRusting = XKRegistryHandler.Blocks.register("factory_attention_rusting", GenericMetalBlock::new);
        factoryAttentionRusted = XKRegistryHandler.Blocks.register("factory_attention_rusted", GenericMetalBlock::new);
        factoryElectricity = XKRegistryHandler.Blocks.register("factory_electricity", GenericMetalBlock::new);
        factoryElectricityRusting = XKRegistryHandler.Blocks.register("factory_electricity_rusting", GenericMetalBlock::new);
        factoryElectricityRusted = XKRegistryHandler.Blocks.register("factory_electricity_rusted", GenericMetalBlock::new);
        factoryToxic = XKRegistryHandler.Blocks.register("factory_toxic", GenericMetalBlock::new);
        factoryToxicRusting = XKRegistryHandler.Blocks.register("factory_toxic_rusting", GenericMetalBlock::new);
        factoryToxicRusted = XKRegistryHandler.Blocks.register("factory_toxic_rusted", GenericMetalBlock::new);
        factoryRadiation = XKRegistryHandler.Blocks.register("factory_radiation", GenericMetalBlock::new);
        factoryRadiationRusting = XKRegistryHandler.Blocks.register("factory_radiation_rusting", GenericMetalBlock::new);
        factoryRadiationRusted = XKRegistryHandler.Blocks.register("factory_radiation_rusted", GenericMetalBlock::new);
        factoryBiohazard = XKRegistryHandler.Blocks.register("factory_biohazard", GenericMetalBlock::new);
        factoryBiohazardRusting = XKRegistryHandler.Blocks.register("factory_biohazard_rusting", GenericMetalBlock::new);
        factoryBiohazardRusted = XKRegistryHandler.Blocks.register("factory_biohazard_rusted", GenericMetalBlock::new);
        hollowSteelFrame = XKRegistryHandler.Blocks.register("hollow_steel_frame", GenericMetalBlock::new);
        hollowSteelBeam = XKRegistryHandler.Blocks.register("hollow_steel_beam", MetalWallBlock::new);
        hollowSteelTrapdoor = XKRegistryHandler.Blocks.register("hollow_steel_trapdoor", MetalTrapdoorBlock::new);
        steelTrapdoor = XKRegistryHandler.Blocks.register("steel_trapdoor", MetalTrapdoorBlock::new);
        hollowSteelObliqueBeam = XKRegistryHandler.Blocks.register("hollow_steel_oblique_beam", MetalStairBlock::new);
        hollowSteelObliqueBeamGentle = XKRegistryHandler.Blocks.register("hollow_steel_oblique_beam_gentle", MetalStairBlock::new);
        hollowSteelObliqueBeamSteep = XKRegistryHandler.Blocks.register("hollow_steel_oblique_beam_steep", MetalStairBlock::new);
        hollowSteelHalfBeam = XKRegistryHandler.Blocks.register("hollow_steel_half_beam", HalfBeamBlock::new);
        hollowSteelBar = XKRegistryHandler.Blocks.register("hollow_steel_bar", SteelBarBlock::new);
        steelSafetyLadder = XKRegistryHandler.Blocks.register("steel_safety_ladder", SafetyLadderBlock::new);
        steelVentiduct = XKRegistryHandler.Blocks.register("ventiduct", VentiductBlock::new);
        ventiductCorner = XKRegistryHandler.Blocks.register("ventiduct_corner", VentiductCornerBlock::new);
        ventiductUp = XKRegistryHandler.Blocks.register("ventiduct_up", VentiductUpBlock::new);
        ventiductDown = XKRegistryHandler.Blocks.register("ventiduct_down", VentiductDownBlock::new);
        ventiductSixway = XKRegistryHandler.Blocks.register("ventiduct_sixway", VentiductSixwayBlock::new);
        ventiductCover = XKRegistryHandler.Blocks.register("ventiduct_cover", VentiductCoverBlock::new);
        ventiductOblique = XKRegistryHandler.Blocks.register("ventiduct_oblique", VentiductObliqueBlock::new);
        ventiductObliqueSecond = XKRegistryHandler.Blocks.register("ventiduct_oblique_second", VentiductObliqueSecondBlock::new);
        factoryVentFan = XKRegistryHandler.Blocks.register("factory_vent_fan", FanBlock::new);
        factoryVentFanBig = XKRegistryHandler.Blocks.register("factory_vent_fan_big", FanBlock::new);
        factoryTrapdoor = XKRegistryHandler.Blocks.register("factory_trapdoor", MetalTrapdoorBlock::new);
        factoryTrapdoorRusting = XKRegistryHandler.Blocks.register("factory_trapdoor_rusting", MetalTrapdoorBlock::new);
        factoryTrapdoorRusted = XKRegistryHandler.Blocks.register("factory_trapdoor_rusted", MetalTrapdoorBlock::new);
        fanBlade = XKRegistryHandler.Blocks.register("fan_blade", () -> new MiscBlock(0));
        steelWindmill = XKRegistryHandler.Blocks.register("steel_windmill", () -> new MiscBlock(0));
        ironWindmill = XKRegistryHandler.Blocks.register("iron_windmill", () -> new MiscBlock(0));
        woodenWindmill = XKRegistryHandler.Blocks.register("wooden_windmill", () -> new MiscBlock(0));
        factoryLamp = XKRegistryHandler.Blocks.register("factory_lamp", () -> new MiscBlock(15));
        factoryLampBroken = XKRegistryHandler.Blocks.register("factory_lamp_broken", () -> new MiscBlock(0));
        factoryWarningLamp = XKRegistryHandler.Blocks.register("factory_warning_lamp", () -> new MiscBlock(15));
        factoryLightBar = XKRegistryHandler.Blocks.register("factory_light_bar", LightBarBlock::new);
        factoryCeilingLamp = XKRegistryHandler.Blocks.register("factory_ceiling_lamp", CeilingLampBlock::new);
        factoryPendant = XKRegistryHandler.Blocks.register("factory_pendant", PendantBlock::new);
        factoryLampBlock = XKRegistryHandler.Blocks.register("factory_lamp_block", LampBlock::new);
        factoryLampSlab = XKRegistryHandler.Blocks.register("factory_lamp_slab", LampSlabBlock::new);
        factoryLampStair = XKRegistryHandler.Blocks.register("factory_lamp_stair", LampStairBlock::new);
        screenOff = XKRegistryHandler.Blocks.register("screen_off", () -> new ItemFrameCover(0));
        screenOn = XKRegistryHandler.Blocks.register("screen", () -> new ItemFrameCover(9));
        screenCube = XKRegistryHandler.Blocks.register("screen_cube", () -> new ItemFrameCover(9));
        screenDiagram = XKRegistryHandler.Blocks.register("screen_diagram", () -> new ItemFrameCover(9));
        screenDna = XKRegistryHandler.Blocks.register("screen_dna", () -> new ItemFrameCover(9));
        screenList = XKRegistryHandler.Blocks.register("screen_list", () -> new ItemFrameCover(9));
        screenMessage = XKRegistryHandler.Blocks.register("screen_message", () -> new ItemFrameCover(9));
        screenThreebodies = XKRegistryHandler.Blocks.register("screen_threebodies", () -> new ItemFrameCover(9));
        screenTransport = XKRegistryHandler.Blocks.register("screen_transport", () -> new ItemFrameCover(9));
        mechanicalConsole = XKRegistryHandler.Blocks.register("mechanical_console", WoodStairBlock::new);
        mechanicalScreen = XKRegistryHandler.Blocks.register("mechanical_screen", ConsoleScreenBlock::new);
        mechanicalChair = XKRegistryHandler.Blocks.register("mechanical_chair", () -> new ConsoleChairBlock(Material.WOOD, SoundType.WOOD));
        techConsole = XKRegistryHandler.Blocks.register("tech_console", WoodStairBlock::new);
        techScreen = XKRegistryHandler.Blocks.register("tech_screen", ConsoleScreenBlock::new);
        techChair = XKRegistryHandler.Blocks.register("tech_chair", () -> new ConsoleChairBlock(Material.METAL, SoundType.METAL));
        techTable = XKRegistryHandler.Blocks.register("tech_table", TechTableBlock::new);
        techTableCircle = XKRegistryHandler.Blocks.register("tech_table_circle", TechTableBlock::new);
        techTableBigcircle = XKRegistryHandler.Blocks.register("tech_table_bigcircle", BigTechTableBlock::new);
        hologramBase = XKRegistryHandler.Blocks.register("hologram_base", () -> new ItemFrameCover(1));
    }
}
